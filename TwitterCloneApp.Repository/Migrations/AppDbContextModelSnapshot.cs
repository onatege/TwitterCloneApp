// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TwitterCloneApp.Repository;

#nullable disable

namespace TwitterCloneApp.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TagTweet", b =>
                {
                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.Property<int>("TweetsId")
                        .HasColumnType("int");

                    b.HasKey("TagsId", "TweetsId");

                    b.HasIndex("TweetsId");

                    b.ToTable("TagTweet");
                });

            modelBuilder.Entity("TwitterCloneApp.Core.Models.Follow", b =>
                {
                    b.Property<int>("FollowerId")
                        .HasColumnType("int");

                    b.Property<int>("FollowingId")
                        .HasColumnType("int");

                    b.HasKey("FollowerId", "FollowingId");

                    b.HasIndex("FollowingId");

                    b.ToTable("Follows", (string)null);

                    b.HasData(
                        new
                        {
                            FollowerId = 1,
                            FollowingId = 2
                        },
                        new
                        {
                            FollowerId = 1,
                            FollowingId = 3
                        },
                        new
                        {
                            FollowerId = 2,
                            FollowingId = 1
                        },
                        new
                        {
                            FollowerId = 3,
                            FollowingId = 1
                        });
                });

            modelBuilder.Entity("TwitterCloneApp.Core.Models.Like", b =>
                {
                    b.Property<int>("TweetId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TweetId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes", (string)null);

                    b.HasData(
                        new
                        {
                            TweetId = 1,
                            UserId = 1
                        },
                        new
                        {
                            TweetId = 1,
                            UserId = 2
                        },
                        new
                        {
                            TweetId = 1,
                            UserId = 3
                        },
                        new
                        {
                            TweetId = 3,
                            UserId = 1
                        },
                        new
                        {
                            TweetId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("TwitterCloneApp.Core.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("isTrending")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("Tags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "#testingSeed1",
                            isTrending = false
                        },
                        new
                        {
                            Id = 2,
                            Name = "#testingSeed2",
                            isTrending = true
                        });
                });

            modelBuilder.Entity("TwitterCloneApp.Core.Models.TwReply", b =>
                {
                    b.Property<int>("TweetId")
                        .HasColumnType("int");

                    b.Property<int>("ReplyId")
                        .HasColumnType("int");

                    b.HasKey("TweetId", "ReplyId");

                    b.HasIndex("ReplyId");

                    b.ToTable("Replies", (string)null);

                    b.HasData(
                        new
                        {
                            TweetId = 1,
                            ReplyId = 3
                        });
                });

            modelBuilder.Entity("TwitterCloneApp.Core.Models.Tweet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(280)
                        .HasColumnType("nvarchar(280)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("isMainTweet")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tweets", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "First tweet",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            isDeleted = false,
                            isMainTweet = true
                        },
                        new
                        {
                            Id = 2,
                            Content = "Second tweet",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            isDeleted = false,
                            isMainTweet = true
                        },
                        new
                        {
                            Id = 3,
                            Content = "Replied test tweet",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2,
                            isDeleted = false,
                            isMainTweet = false
                        });
                });

            modelBuilder.Entity("TwitterCloneApp.Core.Models.TweetTag", b =>
                {
                    b.Property<int>("TweetId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("TweetId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TweetTags", (string)null);

                    b.HasData(
                        new
                        {
                            TweetId = 1,
                            TagId = 1
                        },
                        new
                        {
                            TweetId = 1,
                            TagId = 2
                        },
                        new
                        {
                            TweetId = 2,
                            TagId = 1
                        },
                        new
                        {
                            TweetId = 3,
                            TagId = 1
                        },
                        new
                        {
                            TweetId = 3,
                            TagId = 2
                        });
                });

            modelBuilder.Entity("TwitterCloneApp.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfileImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "TEST",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "test1",
                            Email = "test123@gmail.com",
                            Password = "test123",
                            UserName = "TEST",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            Biography = "TEST1",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "test2",
                            Email = "test111@gmail.com",
                            Password = "test123",
                            UserName = "TEST1",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            Biography = "TEST2",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "test3",
                            Email = "test121@gmail.com",
                            Password = "test123",
                            UserName = "TEST3",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("TagTweet", b =>
                {
                    b.HasOne("TwitterCloneApp.Core.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TwitterCloneApp.Core.Models.Tweet", null)
                        .WithMany()
                        .HasForeignKey("TweetsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitterCloneApp.Core.Models.Follow", b =>
                {
                    b.HasOne("TwitterCloneApp.Core.Models.User", "Follower")
                        .WithMany()
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TwitterCloneApp.Core.Models.User", "Following")
                        .WithMany()
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Follower");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("TwitterCloneApp.Core.Models.Like", b =>
                {
                    b.HasOne("TwitterCloneApp.Core.Models.Tweet", "Tweet")
                        .WithMany()
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TwitterCloneApp.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tweet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwitterCloneApp.Core.Models.TwReply", b =>
                {
                    b.HasOne("TwitterCloneApp.Core.Models.Tweet", "Reply")
                        .WithMany()
                        .HasForeignKey("ReplyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TwitterCloneApp.Core.Models.Tweet", "Tweet")
                        .WithMany()
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reply");

                    b.Navigation("Tweet");
                });

            modelBuilder.Entity("TwitterCloneApp.Core.Models.Tweet", b =>
                {
                    b.HasOne("TwitterCloneApp.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwitterCloneApp.Core.Models.TweetTag", b =>
                {
                    b.HasOne("TwitterCloneApp.Core.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TwitterCloneApp.Core.Models.Tweet", "Tweet")
                        .WithMany()
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Tweet");
                });
#pragma warning restore 612, 618
        }
    }
}
